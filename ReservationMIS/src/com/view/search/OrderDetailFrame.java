/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.view.search;

import com.biz.CustomerBiz;
import com.biz.CustomerBizImpl;
import com.biz.MenuBiz;
import com.biz.MenuBizImpl;
import com.biz.OrderBiz;
import com.biz.OrderBizImpl;
import com.biz.OrderDishesBiz;
import com.biz.OrderDishesBizImpl;
import com.po.Customer;
import com.po.Menu;
import com.po.Order;
import com.po.OrderDishes;
import com.util.FrameUtil;
import com.util.StringUtil;
import com.view.order.OrderDishesByCookFrame;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class OrderDetailFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form OrderDetailFrame
     */
    OrderBiz orderBiz = new OrderBizImpl();
    OrderDishesBiz orderDishesBiz = new OrderDishesBizImpl();
    CustomerBizImpl customerBiz = new CustomerBizImpl();

    public OrderDetailFrame() {
        initComponents();
        this.btnDelete.setEnabled(false);
//        initSelect();
        this.jScrollPane1.getViewport().setBackground(Color.WHITE);
        this.jScrollPane2.getViewport().setBackground(Color.WHITE);
    }

//    private void initSelect() {
//        //模拟从数据库中获取Title并填充到组合框
//        String[] select = {"还有未煮的菜的订单", "有正在煮的菜的订单", "有等待上菜的订单", "已上菜的订单", "已结束的订单"};
//        for (String s : select) {
//            this.choiceEmp.addItem(s);
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        homePanel1 = new com.view.HomePanel();
        lblOrderDetail = new javax.swing.JLabel();
        choiceEmp = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        lblMenuDetail = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDishes = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();

        setClosable(true);
        setTitle("订单详情");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        lblOrderDetail.setFont(new java.awt.Font("华文细黑", 0, 18)); // NOI18N
        lblOrderDetail.setForeground(new java.awt.Color(255, 51, 51));
        lblOrderDetail.setText("订单明细");

        choiceEmp.setFont(new java.awt.Font("华文细黑", 0, 18)); // NOI18N
        choiceEmp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "当前订单", "还有未煮的菜的订单", "有正在煮的菜的订单", "有等待上菜的订单", "已上菜的订单", "历史订单" }));
        choiceEmp.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 255, 255), new java.awt.Color(204, 153, 255)));
        choiceEmp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choiceEmpItemStateChanged(evt);
            }
        });
        choiceEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceEmpActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 255, 102));
        jButton1.setFont(new java.awt.Font("华文细黑", 0, 18)); // NOI18N
        jButton1.setText("查询");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lblMenuDetail.setFont(new java.awt.Font("华文细黑", 0, 18)); // NOI18N
        lblMenuDetail.setForeground(new java.awt.Color(255, 51, 51));
        lblMenuDetail.setText("菜单详情页");

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "订单编号", "用餐人数", "下单时间", "服务员编号", "餐桌编号"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrder);
        if (tblOrder.getColumnModel().getColumnCount() > 0) {
            tblOrder.getColumnModel().getColumn(0).setResizable(false);
            tblOrder.getColumnModel().getColumn(1).setResizable(false);
            tblOrder.getColumnModel().getColumn(2).setResizable(false);
            tblOrder.getColumnModel().getColumn(3).setResizable(false);
            tblOrder.getColumnModel().getColumn(4).setResizable(false);
        }

        tblDishes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "订单编号", "订菜品编号", "菜品名称", "菜品数量", "下单时间", "菜品状态", "菜品单价"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDishes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDishesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDishes);
        if (tblDishes.getColumnModel().getColumnCount() > 0) {
            tblDishes.getColumnModel().getColumn(0).setResizable(false);
            tblDishes.getColumnModel().getColumn(1).setResizable(false);
            tblDishes.getColumnModel().getColumn(2).setResizable(false);
            tblDishes.getColumnModel().getColumn(3).setResizable(false);
            tblDishes.getColumnModel().getColumn(4).setResizable(false);
            tblDishes.getColumnModel().getColumn(5).setResizable(false);
            tblDishes.getColumnModel().getColumn(6).setResizable(false);
        }

        btnDelete.setBackground(new java.awt.Color(255, 255, 102));
        btnDelete.setFont(new java.awt.Font("华文细黑", 0, 18)); // NOI18N
        btnDelete.setText("删除");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homePanel1Layout = new javax.swing.GroupLayout(homePanel1);
        homePanel1.setLayout(homePanel1Layout);
        homePanel1Layout.setHorizontalGroup(
            homePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(homePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(homePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMenuDetail)
                        .addComponent(lblOrderDetail)
                        .addGroup(homePanel1Layout.createSequentialGroup()
                            .addComponent(choiceEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(jButton1))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        homePanel1Layout.setVerticalGroup(
            homePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblOrderDetail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(choiceEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(lblMenuDetail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 36, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(homePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(homePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderMouseClicked
        String choice = this.choiceEmp.getSelectedItem().toString().trim();             //获得下拉框的内容

        int selectRow = this.tblOrder.getSelectedRow();
        int orderId = (Integer) this.tblOrder.getValueAt(selectRow, 0);

        Vector vt = new Vector();
        List<OrderDishes> list = new ArrayList<OrderDishes>();

        showOnTable2(list);
        if ("当前订单".equals(choice)) {
            list = (List<OrderDishes>) orderDishesBiz.findByOid(orderId);
        } else if ("还有未煮的菜的订单".equals(choice)) {//状态为1
            list = (List<OrderDishes>) orderDishesBiz.findByOid(orderId);
        } else if ("有正在煮的菜的订单".equals(choice)) {//状态为2
            list = (List<OrderDishes>) orderDishesBiz.findByOid(orderId);
        } else if ("有等待上菜的订单".equals(choice)) {//状态为3
            list = (List<OrderDishes>) orderDishesBiz.findByOid(orderId);
        } else if ("已上菜的订单".equals(choice)) {//状态为4
            list = (List<OrderDishes>) orderDishesBiz.findByOid(orderId);
        } else if ("历史订单".equals(choice)) {//order状态为0
            list = (List<OrderDishes>) orderDishesBiz.findByOid(orderId);
        }
        showOnTable2(list);
    }//GEN-LAST:event_tblOrderMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String choice = this.choiceEmp.getSelectedItem().toString().trim();             //获得下拉框的内容

        if (choice.equals("当前订单")) {
            List<Order> olist = orderBiz.findAll();
            showOnTable(olist);
        } else if (choice.equals("还有未煮的菜的订单")) {//状态为1
            List<Order> olist = orderBiz.findByOdstate(1);
            showOnTable(olist);
        } else if (choice.equals("有正在煮的菜的订单")) {//状态为2
            List<Order> olist = orderBiz.findByOdstate(2);
            showOnTable(olist);
        } else if (choice.equals("有等待上菜的订单")) {//状态为3
            List<Order> olist = orderBiz.findByOdstate(3);
            showOnTable(olist);
        } else if (choice.equals("已上菜的订单")) {//状态为4
            List<Order> olist = orderBiz.findByOdstate(4);
            showOnTable(olist);
        } else if (choice.equals("历史订单")) {//order状态为0
            List<Order> olist = orderBiz.findFinishedOrder();
            showOnTable(olist);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void tblDishesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDishesMouseClicked
        int selectRow = this.tblDishes.getSelectedRow();
        int odid = (Integer) this.tblDishes.getValueAt(selectRow, 1);
        System.out.println(odid);
        OrderDishes od = orderDishesBiz.findAllByID(odid);
        System.out.println(od.getOdstate());
        if (od.getOdstate() == 1) {
            this.btnDelete.setEnabled(true);
        } else {
            this.btnDelete.setEnabled(false);
        }
    }//GEN-LAST:event_tblDishesMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        int row = this.tblDishes.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "请输入要删除的记录！");
            return;
        }
        int dishId = (Integer) this.tblDishes.getValueAt(row, 1);
        int answer = JOptionPane.showConfirmDialog(this, "您确定要退菜吗？");
        if (answer == JOptionPane.YES_OPTION) {
            //调用业务
            boolean result = orderDishesBiz.delete(dishId);
            if (result == true) {
                JOptionPane.showMessageDialog(this, "删除成功");
                //刷新表格
                DefaultTableModel dtm = (DefaultTableModel) this.tblDishes.getModel();
                while (dtm.getRowCount() > 0) {
                    dtm.removeRow(0);
                }
            } else {
                JOptionPane.showMessageDialog(this, "删除失败");
            }
            row = -1;
        }
        this.btnDelete.setEnabled(false);

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void choiceEmpItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choiceEmpItemStateChanged

    }//GEN-LAST:event_choiceEmpItemStateChanged

    private void choiceEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceEmpActionPerformed

//        String choice = this.choiceEmp.getSelectedItem().toString().trim();             //获得下拉框的内容
//        if (choice.equals("当前订单")) {
//            this.btnDelete.setEnabled(false);
//        } else if (choice.equals("还有未煮的菜的订单")) {
//            this.btnDelete.setEnabled(true);
//        } else if (choice.equals("有正在煮的菜的订单")) {
//            this.btnDelete.setEnabled(false);
//        } else if (choice.equals("有等待上菜的订单")) {
//            this.btnDelete.setEnabled(false);
//        } else if (choice.equals("已上菜的订单")) {
//            this.btnDelete.setEnabled(false);
//        } else if (choice.equals("历史订单")) {
//            this.btnDelete.setEnabled(false);
//        }
    }//GEN-LAST:event_choiceEmpActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        //窗口关闭，从map中移除
        FrameUtil.framemap.remove(OrderDetailFrame.class.getName());
    }//GEN-LAST:event_formInternalFrameClosed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox choiceEmp;
    private com.view.HomePanel homePanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMenuDetail;
    private javax.swing.JLabel lblOrderDetail;
    private javax.swing.JTable tblDishes;
    private javax.swing.JTable tblOrder;
    // End of variables declaration//GEN-END:variables

    private void showOnTable(List<Order> list) {
        DefaultTableModel dtm = (DefaultTableModel) this.tblOrder.getModel();
        //2.清空表格信息
        while (dtm.getRowCount() > 0) {
            dtm.removeRow(0);
        }
        //3.显示数据
        for (Order o : list) {
            Vector vt = new Vector();
//            vt.add(m.getMid());
            vt.add(o.getOid());
            vt.add(o.getOpopulation());
            vt.add(o.getOtime());
            vt.add(o.getEid());
            vt.add(o.getTid());
//            vt.add(m.getMcount());
            dtm.addRow(vt);
        }
    }

    /*
     显示某个订单的菜品信息
     */
    private void showOnTable2(List<OrderDishes> list) {
        DefaultTableModel dtm = (DefaultTableModel) this.tblDishes.getModel();
        MenuBiz menuBiz = new MenuBizImpl();
        //2.清空表格信息
        while (dtm.getRowCount() > 0) {
            dtm.removeRow(0);
        }
        //3.显示数据

        ArrayList<String> strArray = new ArrayList<String>();
        strArray.add("已退菜");
        strArray.add("已下单");
        strArray.add("正在做");
        strArray.add("待上菜");
        strArray.add("已上菜");

        for (OrderDishes o : list) {
            Vector vt = new Vector();
            vt.add(o.getOid());
            int dishId = o.getMid();
            vt.add(o.getOdid());
            Menu m = menuBiz.findByMid(dishId);
            vt.add(m.getMname());
            vt.add(o.getOdcount());
            vt.add(o.getOdtime());
            vt.add(strArray.get(o.getOdstate()));
            vt.add(m.getMprice());
            dtm.addRow(vt);
        }
    }
}
